# GENERAL FORMAT
# [...] are sections, [[...]] are subsections, [[[...]]] are subsubsections
# properties of a section, subsection or subsubsection can be added via
# property_name = property_value


# [VERIFIED_BOOT]
# 
# This section handles everything that has to do with the verified boot keys.
# These are the keys required to sign i.e. your firmware or your kernel partitions
# The key_dir parameter indicates the directory where you want to place the key files
# you want to generate. Please make sure that the parent directory is writable for key
# generation. If you want you can make the directory read only afterwards

# [[KEYS]]
# This subsection contains all the keys you want to generate as subsubsections. The subsubsection
# title corresponds to the name the key files will have later. This name is also needed for reference
# in keyblocks or signed partitions later. Valid parameters for the subsubsections are RSA_length
# and hash_alg which indicate the algorithms used in key generation. Possible combinations are:

# RSA1024 SHA1
# RSA1024 SHA256
# RSA1024 SHA512
# RSA2048 SHA1
# RSA2048 SHA256
# RSA2048 SHA512
# RSA4096 SHA1
# RSA4096 SHA256
# RSA4096 SHA512
# RSA8192 SHA1
# RSA8192 SHA256
# RSA8192 SHA512

# Specifying a key will result in a .vbpubk and a .vbprivk file in the key_dir which are the public and
# private keys respectively

# [[KEYBLOCKS]]
# This subsection contains all the keyblocks you want to generate as subsubsections. The subsubsection
# title corresponds to the name the keyblock file will have later. This name is also needed for reference
# in signed partitions later. Valid parameters for the subsubsections are datapubkey, signprivate and flags.
# The datapubkey is the public key the keyblock should verify while the signprivate is the private key used to
# verify the keyblock. The flags parameter is used to indicate the usage of the keyblock and will result in combinations
# of DEV, REC, !DEV, !REC.
# The flags value is a bit field which is formatted like this:
#   0   0    0   0
#   ^   ^    ^   ^
#   |   |    |   |
# !DEV DEV !REC REC
# As such this results in a 4 bit number.

[VERIFIED_BOOT]

key_dir = /boot/keys

    [[KEYS]]
        
        [[[root_key]]]
        RSA_length = 8192
        hash_alg = SHA512

        [[[recovery_key]]]
        RSA_length = 8192
        hash_alg = SHA512

        [[[recovery_kernel_data_key]]]
        RSA_length = 8192
        hash_alg = SHA512

        [[[kernel_subkey]]]
        RSA_length = 4096
        hash_alg = SHA256

        [[[kernel_data_key]]]
        RSA_length = 2048
        hash_alg = SHA256

        [[[firmware_data_key]]]
        RSA_length = 4096
        hash_alg = SHA256

        [[[dev_firmware_data_key]]]
        RSA_length = 4096
        hash_alg = SHA256

    [[KEYBLOCKS]]

        [[[recovery_kernel]]]
        datapubkey = recovery_kernel_data_key
        signprivate = recovery_key
        flags = 13

        [[[kernel]]]
        datapubkey = kernel_data_key
        signprivate = kernel_subkey
        flags = 5

        [[[dev_kernel]]]
        datapubkey = kernel_data_key
        signprivate = kernel_subkey
        flags = 7

        [[[firmware]]]
        datapubkey = firmware_data_key
        signprivate = root_key
        flags = 5

        [[[dev_firmware]]]
        datapubkey = firmware_data_key
        signprivate = root_key
        flags = 7

# [PARTITIONS]
# This section is used to describe the disk layout of the disk containing the root filesystem. The subsections
# indicate which partitions are present and the order in which they are on the disk. The first partition however
# is a unused STATE partition which is needed for chromebooks to accept the disk as bootable. It is created automatically
# and does not need to be specified. Subsections accept the parameters type and size.
# The type indicates the guid to be used. You can either use the following aliases:

# kernel: FE3A2A5D-4F32-41A7-B725-ACCC3285A309
# rootfs: 3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC
# firmware: CAB6E88E-ABF3-4102-A07A-D4BB9BE3C1D3
# future: 2E0A753D-9E48-43B0-8337-B15192CB1B5E
# minios: 09845860-705F-4BB5-B16C-8A8A099CAF52
# hibernate: 3F0F8318-F146-4E6B-8222-C28C8F02E0D5
# basicdata: EBD0A0A2-B9E5-4433-87C0-68B6B72699C7
# dm-crypt: 7FFEC5C9-2D00-49B7-8941-3EA10A5586B7
# luks: CA7D7CCB-63ED-4C53-861C-1742536059CC
# efi: C12A7328-F81F-11D2-BA4B-00A0C93EC93B

# or specify a guid directly (reference: https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs)

# The size parameter specifies the size of the partition in sectors (512 bytes)
# If you are using a partition file created by cuckoo the partitions will be aligned to 1Mib. A negative size
# indicates that the rest of the disk space should be used (only works on the last specified partition)

# If the type kernel or the corresponding guid is used a few options more are needed:
# keyblock: The keyblock to be used for the kernel partition
# signprivate: The private key used to sign the partition
# bzImage: The kernal image to be used
# config: The cmdline to be used by the kernel
# successfull, tries, priority: The flags for the kernel partition (see: https://chromium.googlesource.com/chromiumos/docs/+/HEAD/disk_format.md#selecting-the-kernel)
# update_path (optional): If you have created the partitions and you want to easily install a new kernel after an update you can specify a
# path to the kernel partition. If you execute cuckoo -u every kernel with a update_path will automatically be updated.

[PARTITIONS]

    [[KERNEL-A]]
    type = kernel
    keyblock = kernel
    signprivate = kernel_data_key
    bzImage = /boot/vmlinuz-linux-morphius
    config = 'console= loglevel=7 init=/sbin/init root=PARTUUID=%U/PARTNROFF=2 rootwait rw noinitrd vt.global_cursor_default=0 kern_guid=%U add_efi_memmap boot=local noresume i915.modeset=1 amdgpu.dcfeaturemask=0x8 rtc-cmos.use_acpi_alarm=1'
    size = 65536
#   update_path=/dev/disk/by-partuuid/...
    successfull = 1
    tries = 0
    priority = 1
    version = 1

    [[INITFS]]
    type = rootfs
    size = 204800

    [[ROOT-A]]
    type = rootfs
    size = -1

# [FIRMWARE]
# This section describe how the firmware should be signed. The in_fw field is used to indicate where the firmware rom resides that has to be resigned.
# The out_fw field describes where to place the resigned rom file respectively. To automatically read and write those images you can specify the
# read_cmd and write_cmd. If not specified or empty you have to read and write your firmware yourself. The key parameters needed are:
# root_key, recovery_key, firmware_data_key, firmware_keyblock and kernel_subkey. The root_key is used to verify the firmware by checking the firmware
# keyblock which holds the firmware_data_key. The kernel_subkey is used to verify later kernel keyblocks. The recovery_key can be used to sign recovery
# images. All the key parameters and in_fw, out_fw are required.
[FIRMWARE]
    in_fw = "/tmp/firmware_stock.rom"
    out_fw = "/tmp/signed_firmware_stock.rom"
    read_cmd = "flashrom -p host -r %(in_fw)s"
    write_cmd = "flashrom -p host -w %(out_fw)s"
    root_key = root_key
    recovery_key = recovery_key
    firmware_data_key = firmware_data_key
    firmware_keyblock = firmware
    kernel_subkey = kernel_subkey
    version = 1
